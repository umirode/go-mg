// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/.gitignore
// templates/.modules
// templates/Makefile
// templates/README.md
// templates/go.mod
// templates/go.sum
// templates/main.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x43\x21\x08\x00\xd0\x3b\x53\x90\xf4\xd2\xf6\x00\x43\x74\x12\x0d\xc4\x92\x28\x18\xd4\x26\xfd\xd3\xff\xf7\xc0\x4f\x6a\xd9\x2a\x58\xff\x48\xd6\x3c\x52\x71\x9d\x39\x23\x37\xce\x7e\x9a\x39\x3e\xbf\xeb\xa2\x11\xd5\x5e\xf0\x53\x97\x48\x86\x11\x72\xba\x2e\x86\x37\xd9\xe8\x40\x26\x5a\x18\xaa\x39\xdf\x01\x00\x00\xff\xff\x55\x73\x2b\x3f\x51\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 81, mode: os.FileMode(420), modTime: time.Unix(1580754236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModules = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesModulesBytes() ([]byte, error) {
	return bindataRead(
		_templatesModules,
		"templates/.modules",
	)
}

func templatesModules() (*asset, error) {
	bytes, err := templatesModulesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.modules", size: 0, mode: os.FileMode(420), modTime: time.Unix(1580753921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4f\x6a\xf3\x30\x14\xc4\xd7\xd2\x29\xe6\x0b\xc6\x7c\x2d\xc8\x07\x70\x30\x74\xd5\x03\x64\xdb\x94\xda\x48\xb2\x78\x54\xd6\x13\xfa\xb3\x28\xe4\xf0\xa5\x46\x89\x29\x74\xa9\x99\x9f\x66\xe6\x6d\x6c\xaa\xb7\xf9\x62\x23\x67\x2a\x9c\xc8\x66\x8c\x13\x66\xbd\x14\x0c\xcd\x9c\x65\x4c\x5c\xf8\x95\x7c\x33\x57\x0a\x06\xcd\x84\x2a\x5f\xd1\x62\x85\x0a\xcb\x66\x71\x7a\x1e\x76\xf8\x34\x4b\x49\x21\x97\xc5\x7b\xd5\xc8\x51\x8a\x37\xfc\x83\xb2\x8f\xaf\xef\xb8\xdd\x90\x36\x28\x73\x59\xef\xa2\x14\xdb\xa7\xa1\x04\x15\x0f\xe5\x65\xe5\xd4\x5e\xa0\x80\xee\xff\x1f\xab\x9f\x70\x86\x61\x5c\xa5\x10\xfa\x18\xd7\xf7\x70\x54\xa0\x3d\x07\x8b\xae\x6b\x19\x7d\x0f\x6d\xa0\xce\xb8\x4a\x00\x30\x1c\x6c\x2b\x59\xe9\x5e\x71\x9c\xfc\x48\xfe\x61\xc5\xae\x6b\x74\xdd\x8e\x2a\xe5\xf8\x83\x6b\x99\xa2\xaf\x8e\x42\x9e\x5c\x8a\x7a\x1c\x7e\x25\xa7\x1a\x46\x29\x1c\x23\xd5\x80\xe1\x3b\x00\x00\xff\xff\x58\x46\xf9\xee\x71\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 369, mode: os.FileMode(420), modTime: time.Unix(1580754444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x87\x6c\x14\x9c\xdc\xc1\x95\x3b\x71\xe1\x01\xd2\x93\xfe\x99\x14\x76\x57\x0d\x55\x1d\x65\x18\xe6\xee\x92\x11\x85\xe0\xae\x28\x1e\xef\xbf\x1e\xd7\xeb\xf0\x9a\x2a\x6f\x37\x54\x99\xdc\x82\xfe\x29\x13\xbb\xae\xef\xf1\xe6\xd6\xec\xb8\xce\x98\xa5\x30\xba\xe7\x9c\x71\xb1\xd5\xe1\x3c\x5b\x48\x33\x17\x06\xbe\xa4\x2d\x38\xef\x48\x88\x62\x1c\xaa\xe5\xb5\x30\xc6\xfb\x0f\x0f\xa6\x44\x11\x25\x0e\xd8\xce\x3f\xc7\xe5\x71\xe8\xde\x17\x2a\x7c\x55\x8c\x35\x7d\x10\xa2\xd1\x52\x29\x87\x5f\xc3\x13\xda\x22\x81\xc9\x6a\x4d\x9a\x51\x2c\xe5\x7d\xc3\xec\x56\xff\x2d\x6e\xe8\x89\x4a\x4f\x8d\x78\xb1\x92\xf4\x84\xc9\x32\x71\x4c\xc1\x0c\xdb\x1a\xef\xdd\x3f\x7c\x0c\xdf\x01\x00\x00\xff\xff\x24\x27\x21\x84\x0c\x01\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 268, mode: os.FileMode(420), modTime: time.Unix(1580754469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\x3d\x6e\xc3\x30\x0c\x05\xe0\x39\x3a\x85\xc6\x76\x30\x25\xea\xa7\xb2\x2f\xd1\x3b\x48\x36\xad\x1a\xb0\xcd\x54\x91\x83\x14\x41\xee\x5e\x24\x5d\x5a\x0f\xcd\x4a\x3c\x7c\x7c\xe4\xc2\xc3\x36\x93\xbc\x5e\xe1\x3d\x2e\x74\xbb\x09\x91\x59\x22\xa0\x15\xa2\xd0\xe7\x36\x15\x92\x2f\xe2\x90\xa7\xfa\xb1\x25\xe8\x79\x51\x99\xe7\xb8\x66\x75\x2c\x5c\x39\x6d\xa3\x3c\x23\x58\xb0\xe2\xf0\x33\x07\x2e\x59\x5d\xd4\x4a\x55\x9e\x35\x68\xd0\x8d\xd1\x46\x6b\x44\x87\xde\x3b\xb4\xcd\x5b\x1c\x93\xc7\xce\x93\x8f\x51\x2a\x25\xa7\x75\x98\x0a\xf5\x75\x07\x9c\xbe\x4e\x7f\x01\xe3\x8c\x76\xce\x60\xd3\x8d\x29\xf9\x30\xb6\x61\xa0\xee\x1f\xa0\xd2\xe5\x51\xc1\x82\xd9\xa7\x38\xcf\x04\xbf\xc2\x99\xd6\xc7\x35\xbb\x85\x2d\x5a\x7b\x6f\xec\xdb\x9e\x82\x0f\x34\xd8\x2e\x3d\xa5\xca\xb1\xbf\x7f\xc4\x04\xd0\xe2\x55\x7c\x07\x00\x00\xff\xff\x15\x45\x14\xcd\x5d\x01\x00\x00")

func templatesGoModBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoMod,
		"templates/go.mod",
	)
}

func templatesGoMod() (*asset, error) {
	bytes, err := templatesGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.mod", size: 349, mode: os.FileMode(420), modTime: time.Unix(1580740250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x49\xaf\xa3\x4a\xb6\x85\xe7\xf5\x2b\x6a\x6e\xf9\x10\x2d\x04\x4f\xaa\x01\xc6\x18\x77\xb8\xc1\xe0\x6e\xf2\x44\x13\x60\x7a\x4c\x63\x83\x7f\xfd\x93\x9d\x57\xf5\x7c\xce\xcd\x9b\x99\xba\x55\x39\xf2\xc0\xd2\xfa\x62\xed\xd8\x7b\x45\x04\x5e\x5a\xb4\xfe\x47\x58\x14\x61\xca\x3f\xbc\x22\x13\xc2\xe2\x9f\x37\xf0\x81\xc4\x0f\x20\x84\xc5\x47\x56\xf8\xff\xbc\xc0\xff\x71\xb6\xf6\x29\x39\x3e\xf6\x75\x1b\x18\x83\xf1\x7d\x02\x1d\x6d\x00\xba\xc0\xb3\x07\x54\x9c\xdf\x55\x67\x19\x79\x09\x50\xd3\xcc\xb0\xee\xff\xfa\x47\x18\x35\x97\xd6\x7d\x89\x8d\xda\x2a\x6f\x76\x6d\x7d\x89\x84\xa6\xc8\xd2\xa7\x32\xfe\x80\x6f\xc2\xdd\xf4\xa0\xae\xf4\x78\x44\x8b\x6b\x34\xae\xd8\x23\xc8\x0b\x6c\x4c\x5b\x8e\xa6\x0d\xad\x67\xa3\xa4\x2e\x01\xbe\x7a\x7d\x70\x30\xec\x4f\xc2\x1e\xcf\xeb\xb6\x1e\x46\x79\xdd\x54\x6d\xc6\xf3\xc6\x69\xa2\x22\x17\x8a\x92\xe7\x7f\xfc\x55\x56\x45\xf3\xcd\xca\x27\x60\x20\x2e\x36\x59\x54\x15\x71\xb7\x50\x20\xaa\xf2\xfe\xba\x56\xe8\x68\xb4\x24\x6b\x99\xe1\x75\xc0\xf5\xcd\x35\x9e\x1e\x76\x56\xce\xbf\x00\xd3\x88\xe7\x8d\x2c\x64\x51\x5d\x97\x3c\xfd\xc3\x0a\x79\x53\xbe\xc6\x62\x3c\x53\x55\xbc\x95\x1e\x93\xf3\x6d\x7f\x28\xa4\xc5\x52\x79\xa8\xb8\xef\xa8\x2e\x25\xfd\x6d\x37\x4e\x3c\x19\x94\xe5\xa6\xff\x5c\x23\x9e\xdf\x8a\xbe\xac\x8a\xae\x17\xc2\x62\xe8\x15\x79\x53\x15\xe9\xb0\x4c\x9d\x9c\x3f\x21\xf2\x07\x1c\x82\x0f\x04\xa0\x0c\x01\x12\x11\xa0\x0c\xd0\x21\x0d\x98\xeb\x20\xe6\x13\x22\xe1\xb7\x25\x9c\xac\x54\x90\xb3\x95\xa3\xde\x13\xf3\x96\x89\x3e\x74\x90\x8a\xfb\x6c\xe2\xf1\x93\x30\x56\x47\xfb\x5b\xbd\xb8\x98\x13\x10\x69\x0a\xf9\xab\x25\xbc\xca\xe6\x0d\x43\x9e\x0f\x6f\x4e\x1a\xf9\x4e\xf3\x5a\x05\xfc\xd4\x0e\xd1\x2e\xeb\xbc\x3e\xbe\x5a\xf5\xbc\x9c\x21\x93\xac\x9c\xf1\x4a\x1a\x24\x2b\xb4\xd7\xec\x7c\x21\x94\xde\x28\xcd\x78\xad\x54\x13\xc9\xfb\xc4\x09\x8b\xd4\xc9\x43\x21\x4c\x8b\xf0\x29\x0a\x3e\xc0\x10\x01\x28\x02\x88\x44\x84\x29\x06\x6c\x88\xb0\xcf\x03\xc2\x45\x0f\x12\xf7\x0d\xb8\x1b\x4d\xa5\x3e\xec\x22\x56\x06\x76\xea\xac\x13\xc3\x68\x95\x6d\xb3\x99\xd9\x13\xc6\xbd\xc3\x86\xce\xb4\x54\x50\x4d\x69\xbf\x41\xdb\xef\x01\xb3\xc2\x4b\xfe\x79\x83\x1f\xf0\x53\x2b\x14\xd6\xa9\x9d\x75\xeb\xea\x7c\x6f\x36\x11\x57\x07\x53\xd8\x2a\xd3\xd2\x5b\x4e\x72\xad\x57\xf4\xfd\x78\x29\x24\x44\x9a\x07\x6e\x06\x94\xef\x89\xbe\x2a\xe5\xb6\xc1\x53\x18\x7d\x2a\x8f\x98\x6e\x33\x49\x76\x07\xe9\x31\x32\x82\x5b\x28\x78\xe7\x0c\xec\xf4\x22\x88\x67\xea\x75\x3f\xb2\x9b\x6a\x43\xfb\xb9\x91\xcd\x54\x68\xff\x4c\x18\x7f\xa0\x97\x62\x5e\x6f\x4e\x8f\xcb\x95\x26\x26\xbf\x88\xdb\x59\x36\xc3\x09\xbd\x1e\x1e\x6b\xb2\xd1\xdc\x9b\x3b\x3b\x20\xef\xbe\x0b\x4c\x41\xec\xea\x5f\x50\xfc\x5d\x4b\xc5\x4f\xc5\xb0\x8f\x9d\x2e\x18\xd4\xb7\xd1\xe1\x08\xd8\x39\x5e\x30\x31\x5a\xc9\x21\xb7\xe7\x13\x30\x15\xc3\x12\xcd\xcc\xc5\x51\x5c\x05\xa2\x30\xfb\x05\xc5\xb7\xa5\xde\x1e\x31\xc1\x63\x69\xb0\xdb\x1e\x27\x02\x29\x1f\x07\xe1\x72\x6f\x94\xeb\xdd\x13\x23\x2b\x6a\xd4\x68\xbf\x73\x0e\x0f\x9a\x9e\xda\xeb\xfd\x8b\xf0\x33\xdb\x5e\xb3\x95\x95\xdf\x02\xe1\x7d\xb3\x8a\xe3\x23\x30\x8a\x72\xc1\xe6\x4a\x9c\x9e\xe4\x6e\x42\x6e\xd3\xdd\x5e\xd9\x39\xa0\x5f\xf6\x47\x69\x97\x37\xcb\x35\x75\xae\xe6\x02\x18\x9f\x64\xcb\xaa\xc8\x78\x73\xe1\x6d\xfd\x47\x36\xfc\x6f\x56\xf8\x3c\x7d\xeb\x6b\x19\x30\x88\x20\x25\x88\xc0\x21\x24\x01\x07\x3e\x74\x01\xf4\xdf\x33\xa3\x33\x66\x90\x2a\xc0\xde\xd4\xe3\x5a\x5b\xd4\xc6\x4a\xee\x3b\x9e\xcd\x8a\x53\x22\x5a\x19\x52\xa1\xde\x9c\x74\x3f\xd0\x9b\xe6\xfa\x6c\xc1\x57\x85\x3e\x8a\x2a\x14\x3a\xc1\xab\xfa\xf2\x5b\xbe\xfd\x9b\x86\x01\x43\x08\x4a\x90\x0d\x3d\xc4\x08\xe6\x00\xfa\xb2\xf3\xbe\xd9\x7e\xbc\x0a\x3d\xad\x82\x82\x0a\xa8\xa2\x26\x21\x8c\x96\x41\x34\xb7\xa9\x56\x8a\x70\x6b\x27\xfa\x81\x5d\x4b\xbf\xae\x67\x60\x70\xff\x42\xe3\x5d\xf9\x09\x05\x11\x84\x12\x92\x21\x1d\x52\x20\x07\xdc\xe5\x01\x63\xce\xbb\x31\x75\x0e\x9c\xc3\xce\x00\x54\x42\x00\x2f\x03\x71\xb6\x1c\x04\xb2\x05\x23\x4b\xd6\x47\xfd\xb8\x0b\xce\x0b\x65\x6b\xa9\x26\x4e\xb6\x5f\x8d\xa5\x51\xde\xbc\xb1\xd8\x33\xf5\xa0\x8c\x01\xa0\x43\x4f\x94\x00\x40\x9e\x8b\xa1\xf7\xde\x18\xf6\xde\xcf\xc7\x50\xcf\xc4\x6e\x6a\xae\xd4\x93\x95\x98\x36\x12\x62\xad\x4d\x83\x29\x66\x0b\x6f\x76\xe8\x4b\x41\x57\x8c\xf0\x56\x68\x3f\x66\xc9\x00\x21\x09\x4a\x04\x3f\x13\xd6\xc5\x5c\x74\x28\xf5\x64\xf1\x3d\x33\xee\xfc\x52\xb4\x2b\x07\xa7\xab\xbb\x73\x38\x7a\xb7\xae\x36\xe8\xa9\xdb\xd2\x7e\x9b\xee\x55\xe2\x80\x85\x62\xa8\x6d\x7d\x2c\x37\x85\xfd\x33\x16\x86\x18\x52\x2c\x21\x36\xf4\x01\x04\xc0\x15\x5d\x9f\xb9\xef\xbe\xc4\xdd\x01\x4c\xd5\x58\x08\x21\x9c\x84\xa7\x66\x9a\x86\xf6\xc9\xbe\xab\xc9\x2c\xe0\xeb\x09\x93\x0b\x6f\x66\x3e\xf4\xb5\xc0\x6e\x89\xf7\x85\x95\xf3\x4f\x25\x04\x12\x22\x08\x13\x06\xf0\x10\x8b\x12\xe6\x04\xb8\x0e\x42\xf4\x0d\x95\x2d\xe1\x4a\xb0\x70\xe3\x6c\xa7\xc9\xf8\x58\x4b\xb8\x3a\xcf\xef\x8d\x7d\x99\xe0\x3b\x0e\x9a\xec\x7e\xaf\xaf\x60\x64\x67\x8a\x59\x93\x9f\xa0\x18\x7a\xc6\x39\xa6\x70\xc8\x1c\x02\x01\x97\x5c\x11\x33\xff\x37\xa0\x64\x80\x20\x06\x22\x84\x04\x0c\xb1\x83\x90\x48\x81\x27\x8a\xee\xef\x41\x61\x08\x21\xc3\x98\xe2\xa1\xcf\x18\x93\x24\x28\x89\x90\x3a\xaf\xf8\x38\x1c\x25\x6b\xb3\x8e\x26\x8a\x71\x5c\x5e\x59\x01\xa2\x64\x74\x0a\xd4\xf9\x3e\x35\xa7\x23\xaf\xf6\x22\x8b\xba\xc7\x75\x35\x15\x11\xfb\x5b\x8c\x37\x3b\x8d\x3c\xd5\x9b\x80\x4d\xd7\xab\x8e\x72\x0b\x55\x4d\x2e\x5d\x45\x6e\x5d\x67\xea\xe9\x6a\xef\xf3\x45\x8d\x9b\xcb\xbc\xc0\xdb\x32\x0d\x7f\x84\x42\x00\x40\x48\x20\xa5\x04\xe2\xa1\xe8\x04\x2e\x85\x32\xe5\xd4\x79\xd9\x99\x0c\xd8\x66\x10\x66\xfc\x3e\xd9\x9e\xcc\x44\x9c\x17\xcb\xed\xf2\x1e\x8f\x54\xab\xc5\x99\x37\xb3\xcd\x73\xb0\x4a\xf6\x77\xde\x9a\x8b\xaf\x73\xfb\x6b\x8c\x37\x3b\x0f\xaa\x9a\x7b\xcb\xb2\x32\x65\x2e\x4a\x92\xf5\x58\x2e\x75\x7b\x00\xdc\x78\xb3\x06\xcb\xa4\x5d\x2f\x23\x22\x50\xbd\x99\x1f\x6a\xa1\xfe\x82\x2a\x9c\xb6\xb9\xa0\x2f\x6d\x07\x11\x44\x18\xe3\xa1\x8f\xb8\x88\x00\x22\x98\xb9\xfc\x8d\xb6\x12\x00\x17\x8f\x69\xd6\xf2\xeb\x22\x56\xf4\xae\x58\xb7\xc1\xbe\x66\xdb\xa9\x6e\x56\xad\xbd\xcd\xc5\xfe\x70\xc2\xce\x60\x60\x81\xaf\x83\x5b\xf7\xb9\xf7\x89\x85\x21\x81\x0c\x40\x22\x0e\xa1\x2f\x02\x4e\x44\x00\x3d\x31\x78\x63\x99\x9d\x11\xf2\x3b\xdd\xcf\xbb\x47\xcb\xa9\x10\xcf\x2d\x8d\xb6\x3c\x2e\xe3\x7d\xba\xe6\x42\xf4\xa8\x46\x12\x98\x17\x81\x84\x1c\xe3\x27\x2c\x08\x01\x03\x10\x10\x0c\x87\x04\xb9\x18\x4a\x4c\xa2\x3e\xf8\x2d\x2c\x19\x10\x84\x01\x22\x0c\x82\x21\x84\x08\x61\x00\x65\xe4\x51\xf6\x5f\x62\xd5\x9f\xb7\x0b\x03\x48\x21\xc5\x60\x48\x64\xcc\x28\x17\x39\xa4\xe8\xfd\xa8\xda\x59\x1b\x36\xbe\x8d\x7b\x4f\xf0\x67\xd4\x65\x16\xbd\xd4\x97\x26\x89\x77\x03\x8d\x20\x2b\xef\xeb\x95\x6a\x6f\xfc\xd8\x8b\xf4\xcb\xe9\x87\xa8\x67\x4a\x50\x48\x90\x4c\xe4\xa1\x0f\x5c\x08\x5d\xdf\x71\x3c\xf6\xea\x75\x38\xd2\x97\xc7\x98\x9f\x88\x93\xec\x8f\x7a\xe8\xaa\xf2\xb4\x0d\x2d\x3c\xbf\xe1\x8b\x3a\x03\x0f\x2a\x16\x73\x93\xde\x14\x23\x1c\xfd\xb9\x25\x7e\x85\xf1\xdf\xb7\xf3\x1c\x2b\x44\x10\x20\x04\xc1\xa1\x1c\xb8\x2e\x95\x02\x26\xf9\x5c\x7e\xd9\x11\xc6\x93\x05\x71\xa5\xf9\x94\x8d\xb3\xe4\x7a\xb1\x13\xc2\x8a\x3c\xdf\x05\xd5\xe6\x31\xcb\x36\xc5\xbe\x6b\x8b\xac\x71\x2d\x94\x27\x7f\x8b\xf1\x66\xe7\x02\x57\xf1\xc1\xe3\xf2\xd1\x5c\xea\x5b\xad\x3e\x48\xf7\x72\xb1\x52\x63\x5d\x1e\x37\xab\x54\x4d\xf7\xed\x64\xa9\x9d\xfd\xf1\xca\xd5\xbe\x8e\x6e\xc3\xbb\xe6\xdb\xd3\x09\xbc\x2e\x8b\x22\x6c\x1e\x8d\x46\xaf\x5c\xdf\x32\xb9\xc9\xc4\x95\x15\xc7\x86\xbc\xdf\xcc\x32\xc0\x58\xe1\xc3\x54\x74\x76\x45\x75\x30\x0f\x5f\x23\xed\x4d\xe8\x7d\xca\xaf\x06\xd3\xec\xb5\x0d\x49\x1e\x27\x73\x1c\x5c\x8d\xc3\xa0\xf4\xc4\xa5\x9f\xdf\x2f\x91\x30\x8b\xcb\xfb\xb4\x91\xfa\xbe\xbd\xaf\xb7\x7f\xa9\xf7\xba\x70\x37\x07\xe4\x66\xd1\xe8\x7a\x0f\xe7\xb1\x60\x97\xd7\x46\x65\x5a\x79\xd4\xce\xfb\xd3\xfa\x6e\x83\x5e\x27\xd1\xc1\x2d\xab\xdd\x5e\xf1\xfe\xda\xe1\x7b\x3f\xbb\x5a\x25\xd7\xc1\x11\x6f\xd9\x39\xc8\x68\xb0\x94\xbb\x01\x8e\x9a\x22\x34\xc3\x05\x1e\x94\xcd\xf2\xb0\xb8\x86\x37\x67\x40\x7d\xe5\xeb\xe6\x34\x45\x91\x7e\x1e\x1e\x19\x4a\x08\x41\x19\xa2\xa1\x0c\x02\x47\x64\xc8\x43\x8e\xf8\x9e\x75\xb9\xb4\x52\x5b\xdf\x1b\x09\xb9\xf6\xe8\xf6\x7a\xb6\x74\xc7\x87\x13\x2d\x83\x83\xb5\xbc\x8e\x3c\x15\x2d\xce\x62\xdc\x9f\x6e\x06\xc9\xfe\x54\x85\x2f\x30\xf9\x19\xe3\x08\x21\x4c\xe8\xd0\x0d\x80\x0c\x08\x94\x7c\x87\xb9\xbf\x09\x86\x5e\x0f\x5c\x48\xd1\x30\x90\x90\xe4\xf2\x80\x4b\x94\x79\x6f\x30\xf9\x94\x4a\x5d\xec\x80\x73\x7e\xc5\xd1\xe4\x82\xa7\xc5\xac\x2a\xfc\xa3\x5c\xac\x8c\xe3\xcd\xf7\xf8\xea\x91\xda\x26\x7b\xc4\xc6\xed\xeb\x1c\xfd\x19\x86\xe1\xf3\xc8\x90\x9f\x31\x0e\x65\x4a\xa1\x84\x5d\xdf\x7f\xbf\x3e\x2c\xd5\xc7\x5e\x5f\x3b\xa6\xd8\x1d\xd7\x71\xb2\xc5\x45\xde\xc2\xc9\x5c\x9b\x54\x60\x77\x80\xa1\x2a\x79\x8b\x04\xb6\x13\x96\xe8\xe6\x9f\x7a\xe0\x4f\x30\x8a\x08\x24\x00\x43\x34\x44\x1e\x70\xb8\x04\x80\x08\xf1\xfb\x0d\xcc\x0c\x63\x5b\xce\xc2\xd1\xf1\x1c\x5d\x4f\xd3\x51\xde\x1d\x9d\xf6\x0c\xf5\x1b\xd4\xa6\x53\xe5\x21\x2f\xe2\x7d\xb4\x95\x58\x37\x3a\x82\x57\x19\x5f\x9f\x6b\xde\x98\x4e\x59\xf2\x3c\x8c\x72\xfe\xed\x99\xfb\x3e\x13\x9a\xab\xd5\x40\xd9\xdf\x18\xba\x74\xe8\xbe\xda\xfa\xfa\x26\xb4\x67\x34\xbd\x3c\x14\x41\x07\x63\xf9\x74\x4f\xe7\xc7\x25\x45\xf3\xc4\xf8\xa9\x32\xf9\xa4\xdc\x95\xde\xdc\x5c\xba\xa0\x12\xaa\x5c\xcb\x6b\x30\x9e\x2d\x4e\xa7\xdb\xe0\x10\x9f\x54\xbf\x9d\xd6\x55\x62\x49\x82\x36\xa2\x47\xed\x46\xbe\xa7\x1c\xf2\xfc\xdf\x1f\x69\xfe\xff\x64\x80\x12\xa4\x50\x44\xd2\xd0\x13\x45\x26\x01\x0f\x20\x2f\x78\x3f\x84\xe6\xd1\x4a\x5a\x75\x85\xb2\xd4\xb3\xe8\x1c\xb4\x92\xaa\x4c\x49\x75\xbc\x84\x8d\x69\x2d\xad\x2e\x68\x78\x96\xce\x40\x7d\xc8\xba\xcc\xfb\x45\xe8\xf3\x9d\x26\x3f\x7f\x09\x1c\x22\x12\x38\xc4\x45\x22\xf4\x28\x7d\x05\xd4\x6e\x3e\xeb\xe0\x6e\x7c\xcf\x8b\x01\xd2\x52\xfd\xa2\x90\xc1\x55\x47\x8f\x89\x2c\x5d\x23\xfb\x61\x19\x83\x6a\x0b\x92\x74\xb4\xf6\xb4\xff\x90\xf6\x66\x71\x6c\x8c\xa6\xeb\x54\x66\x4a\xf8\x20\xa3\xb1\xd6\x2e\x12\xfe\x08\x6b\xa7\xa8\x55\xd3\xe4\xf5\x3e\xaf\xa1\x83\xe7\xe8\x5c\x1b\xab\x5f\xb4\xf8\xca\x74\x06\x31\x7e\x5e\xc7\x28\xf3\xb8\x44\x25\xee\x63\xd9\x7d\xd2\x3c\xb6\x1e\x15\xc7\x0d\x4e\x2c\x77\x7c\x38\x8c\x84\x62\xaf\xe1\x49\x62\x32\x0a\x4b\x12\x9d\xb1\xb1\x71\xfc\x87\xf4\x38\x6a\xb3\x8d\xfd\x1f\xd2\xde\x53\x03\x7b\xe5\xb6\xb9\x75\x37\x4c\x2e\x41\x2f\x49\xfd\x7e\xbc\x8a\x33\xd7\xec\xdb\xf8\x16\x19\x7e\x77\x4a\xa3\xd1\x2e\x59\x5e\x4a\xf5\xfb\x16\xab\xd2\x7b\x75\xba\xfc\xa9\x21\xb3\x6b\x4b\x96\xee\xd8\x6a\xc9\x51\x5f\x5c\x2a\x92\x99\x0f\xbb\xce\x0c\x62\x36\xfb\x82\x67\xd6\xee\xc4\xa0\xd2\x9d\xa3\x71\xc5\x7e\xa8\x8a\x3e\x1f\x2a\x27\xda\x6f\x95\x75\x13\x05\x4b\xd8\x77\x6e\x41\xef\xd7\x5e\x1c\x75\xe7\x1b\xbb\x29\xb6\xbe\xbd\x1f\x47\x6b\x65\xd9\x3b\x9e\xe6\x76\xe1\x0f\x55\xa5\x6f\x67\x5e\x65\x9e\xcc\x89\xb1\x0f\xcd\x9b\xa8\x81\xb1\x04\x76\x49\x1f\xd4\x15\x62\xcd\xf8\x38\x6b\xdb\xcd\xb9\x3f\xe8\xc6\xc6\x37\xbc\xfc\xf8\x53\xb9\xf7\xaf\x8f\x6e\xde\xf5\xeb\x6c\xdd\x55\x5b\x47\x9a\x44\x8f\x5d\x38\x1d\x98\x7c\x14\x3c\xe6\x95\x7a\x82\xe5\x6e\x25\x2d\x8e\xa3\x1d\x73\x5c\x2b\xf9\xd7\x3f\x2e\x45\x9e\xf3\xe0\xc3\x2b\x84\xb0\xf8\x5e\xe6\x03\x04\x28\xc1\x08\x0f\x3d\x14\xc8\xd8\x91\x45\x17\xc8\xef\xe7\x7f\x15\xe0\x54\x27\x23\x73\xe6\xae\x9c\x60\x7e\xb8\x28\x81\xe2\xbb\x02\xdf\x9c\xbb\xda\x14\x88\xd9\xac\xa6\xdb\xc2\xeb\xee\x89\x5c\x91\x9f\xc2\x28\xc2\xcf\xeb\x20\x05\x43\xee\xc8\xd4\xf5\x03\x9f\xca\x81\xf7\x77\x61\xff\x17\x00\x00\xff\xff\xa8\x4b\x53\x6e\xcf\x16\x00\x00")

func templatesGoSumBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoSum,
		"templates/go.sum",
	)
}

func templatesGoSum() (*asset, error) {
	bytes, err := templatesGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.sum", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1580740250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x6a\x04\x21\x10\x86\x6b\xe7\x29\x26\x03\x01\x85\xc3\xf4\x1b\xb6\x48\x93\x2a\x5c\x93\x27\x90\xdd\x59\x91\x9b\xd3\x45\xcd\x6d\xb1\xf8\xee\x41\x8b\x14\xa9\xae\x9c\x81\xef\xfb\xfe\xdd\x2d\x37\xe7\x19\xef\x2e\x44\x80\x70\xdf\x53\xae\xa8\x41\x91\x24\x4f\xa0\x28\x72\x25\x00\x45\x3e\x25\x2f\x6c\x7d\x12\x17\xbd\x4d\xd9\xbf\xf9\xbc\x2f\x04\x06\x60\xfb\x89\xcb\xe0\xb5\xc1\x13\x94\x84\x72\x41\xce\x19\xa7\x19\x23\x57\xfb\x15\x4a\xe5\xa8\xe9\x3c\xed\x95\xeb\x91\xf2\xad\x35\xba\x60\xbf\x3f\xd6\x35\x73\x29\xad\x91\x01\x15\xb6\x41\xbd\xcc\x18\x83\x74\x91\x92\xe4\xed\xa7\xab\x4e\x36\x4d\x9b\x0b\xc2\x2b\xd6\x84\x32\x7c\x13\xbe\x3e\x68\x74\x0c\xa8\x06\xaa\xf4\x5c\x9f\x64\xaf\x7c\x7c\x73\x7e\x70\xd6\x06\xfe\xac\xd3\x8c\xc5\x8e\xb7\x96\x50\xcc\xfb\x73\xa9\xd2\x81\x7f\xa5\x06\xbf\x01\x00\x00\xff\xff\x68\x9e\x43\x7d\x33\x01\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 307, mode: os.FileMode(420), modTime: time.Unix(1580751348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore": templatesGitignore,
	"templates/.modules":   templatesModules,
	"templates/Makefile":   templatesMakefile,
	"templates/README.md":  templatesReadmeMd,
	"templates/go.mod":     templatesGoMod,
	"templates/go.sum":     templatesGoSum,
	"templates/main.go":    templatesMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		".modules":   &bintree{templatesModules, map[string]*bintree{}},
		"Makefile":   &bintree{templatesMakefile, map[string]*bintree{}},
		"README.md":  &bintree{templatesReadmeMd, map[string]*bintree{}},
		"go.mod":     &bintree{templatesGoMod, map[string]*bintree{}},
		"go.sum":     &bintree{templatesGoSum, map[string]*bintree{}},
		"main.go":    &bintree{templatesMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
