// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/.gitignore
// templates/.modules
// templates/Dockerfile
// templates/Makefile
// templates/README.md
// templates/docker-compose.yml
// templates/go.mod
// templates/go.sum
// templates/main.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x80\x20\x0c\x00\xd0\xff\x9d\x62\xd0\x4f\xf5\x31\x0f\xd1\x49\x94\x0d\x1b\xa8\x93\xa9\x41\x9d\xbe\xb7\xe1\xe5\x12\xa7\x30\xa6\x17\x49\x73\x33\x17\x1c\xab\x77\xf3\x89\xbd\xac\xac\x0d\xf7\x7b\x7c\x54\x2d\xe9\x01\x8f\x34\x36\x0f\x50\x8d\x57\x91\x11\xe0\x24\xad\x05\x48\x59\x62\x80\x3f\x00\x00\xff\xff\xae\xda\x8d\x20\x4d\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 77, mode: os.FileMode(420), modTime: time.Unix(1580754576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModules = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesModulesBytes() ([]byte, error) {
	return bindataRead(
		_templatesModules,
		"templates/.modules",
	)
}

func templatesModules() (*asset, error) {
	bytes, err := templatesModulesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.modules", size: 0, mode: os.FileMode(420), modTime: time.Unix(1580753921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6b\xc2\x30\x18\xc5\xef\xf9\x2b\x1e\x3d\x78\x4b\x3a\x19\xec\x30\xf0\xe0\xd4\x89\x6c\x6b\xa4\x3a\x86\x6c\x63\xa4\x49\x4d\x8b\x69\xbe\xd2\xb4\xb8\x3f\x7f\xb4\x55\xdc\x29\xe1\xcb\x2f\xef\xbd\xef\x3d\xa7\xf2\x0d\x96\x9c\xf2\xf6\x71\x2a\xa6\xf7\xe2\x81\x2b\x57\x97\x3e\xc7\x7c\x87\xac\x2b\x9d\x61\xec\x43\xa6\x2f\xcb\x4d\x8a\xd8\x52\x1c\x1a\x1d\xab\xba\x66\x2c\x7d\x4f\xa0\xea\x13\x94\x31\xe0\xdc\x13\xd7\x4a\x17\x39\x6c\xd9\xa2\x52\xa7\x1c\x99\x0a\x05\xea\x86\x5a\xca\xba\x23\x26\x13\x7c\x31\x00\xb0\x04\x9b\xb7\x3d\x56\x74\x99\xd0\x54\xc5\xa3\x79\x7c\x45\xc7\x8b\xe6\x36\xf7\xdc\x12\x63\x0b\xb9\x3d\xc0\x92\xa8\xc8\xf4\x47\xe8\x2a\x88\x78\x70\xb7\x84\x7e\x68\xe8\xec\x1d\x29\x73\x41\x05\xc4\xf0\x3a\xda\x0d\x51\x4a\x1f\x5a\xe5\x1c\xaf\xc8\x74\x2e\x0f\xb7\x30\x8b\xb5\xfc\x59\x25\xf3\xa7\xd7\xd5\x72\x76\x87\xb5\x94\xbb\x99\x2b\x7d\xf7\xdb\x4b\x0f\xbb\x83\x3b\x73\x74\xca\x06\x44\x3c\x80\x9f\x23\x70\x1a\x6a\xc8\x4a\x3f\xd6\xc0\x86\x02\x83\x6e\x54\xab\x8b\x4b\x04\xce\x8f\x0d\x55\xb3\x51\xe1\x1f\x8d\xdb\xb7\x55\xb2\x4f\x0f\x5b\xb9\x49\xf6\xf8\x8c\xae\xe3\xe8\xfb\x2f\x00\x00\xff\xff\xb8\x35\xdc\xb2\x8e\x01\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 398, mode: os.FileMode(420), modTime: time.Unix(1580761774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4f\x6a\xf3\x30\x14\xc4\xd7\xd2\x29\xe6\x0b\xc6\x7c\x2d\xc8\x07\x70\x30\x74\xd5\x03\x64\xdb\x94\xda\x48\xb2\x78\x54\xd6\x13\xfa\xb3\x28\xe4\xf0\xa5\x46\x89\x29\x74\xa9\x99\x9f\x66\xe6\x6d\x6c\xaa\xb7\xf9\x62\x23\x67\x2a\x9c\xc8\x66\x8c\x13\x66\xbd\x14\x0c\xcd\x9c\x65\x4c\x5c\xf8\x95\x7c\x33\x57\x0a\x06\xcd\x84\x2a\x5f\xd1\x62\x85\x0a\xcb\x66\x71\x7a\x1e\x76\xf8\x34\x4b\x49\x21\x97\xc5\x7b\xd5\xc8\x51\x8a\x37\xfc\x83\xb2\x8f\xaf\xef\xb8\xdd\x90\x36\x28\x73\x59\xef\xa2\x14\xdb\xa7\xa1\x04\x15\x0f\xe5\x65\xe5\xd4\x5e\xa0\x80\xee\xff\x1f\xab\x9f\x70\x86\x61\x5c\xa5\x10\xfa\x18\xd7\xf7\x70\x54\xa0\x3d\x07\x8b\xae\x6b\x19\x7d\x0f\x6d\xa0\xce\xb8\x4a\x00\x30\x1c\x6c\x2b\x59\xe9\x5e\x71\x9c\xfc\x48\xfe\x61\xc5\xae\x6b\x74\xdd\x8e\x2a\xe5\xf8\x83\x6b\x99\xa2\xaf\x8e\x42\x9e\x5c\x8a\x7a\x1c\x7e\x25\xa7\x1a\x46\x29\x1c\x23\xd5\x80\xe1\x3b\x00\x00\xff\xff\x58\x46\xf9\xee\x71\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 369, mode: os.FileMode(420), modTime: time.Unix(1580754444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x4a\x04\x41\x0c\x45\xf7\x75\x8a\x0f\xbd\x51\x70\xfa\x0e\xae\xdc\x89\x0b\x0f\xd0\x99\xae\xf4\x74\xb0\x2a\x19\x92\x2a\x65\x18\xe6\xee\xd2\x23\x0a\x8d\xbb\x10\x1e\xef\xbf\x01\xd7\xeb\xf8\x4a\x95\x6f\x37\x54\x99\xdd\x82\xfd\x53\x66\x4e\x69\x18\xf0\xe6\xd6\xec\xd8\x17\x2c\x52\x38\xd2\x73\xce\xb8\x58\x77\x38\x9f\x2d\xa4\x99\x0b\x07\xbe\xa4\xad\x38\xef\x48\x88\x62\x1a\xab\xe5\x5e\x38\xa6\xfb\x0f\x0f\xa6\x8c\x22\xca\x38\x60\x3b\xff\x1c\x97\xc7\x31\xbd\xaf\xac\xf0\xae\x98\x2a\x7d\x30\x44\xa3\x51\x29\x87\x5f\xc3\x13\xda\x2a\x81\xd9\x6a\x25\xcd\x28\x46\x79\xdf\xb0\xb8\xd5\x7f\x8b\x1b\x7a\x62\x65\xa7\xc6\x78\xb1\x42\x7a\xc2\x6c\x99\x71\xa4\xe0\x0c\xdb\x1a\xef\xdd\x3f\x7c\x8c\xe9\x3b\x00\x00\xff\xff\x65\xc3\x50\x0e\x0d\x01\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 269, mode: os.FileMode(420), modTime: time.Unix(1580754524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x50\x37\xd6\x33\x56\xe7\x2a\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xb6\xe2\x52\x50\x48\x2c\x28\x00\x51\x0a\x0a\x49\xa5\x99\x39\x29\x56\x0a\x7a\x5c\xca\x20\x5e\x6a\x45\x41\x7e\x71\xaa\x15\x84\xa3\xa0\xa0\xab\x50\x5d\xad\x17\x90\x5f\x54\x52\x5b\x0b\x11\x2a\xc8\x2f\x2a\x29\xc6\x26\x6d\x85\x50\x08\x92\x29\x4a\x2d\x2e\x49\x2c\x2a\xb1\x52\x48\xcc\x29\x4f\xac\x2c\x06\x04\x00\x00\xff\xff\x0e\xbb\x45\x6c\x89\x00\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 137, mode: os.FileMode(420), modTime: time.Unix(1580757248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x82\x40\x10\x05\xd0\x7e\x4e\x31\xa5\x36\x7f\x5d\x28\xbc\x85\x77\x00\x1c\x47\x92\x5d\x3f\x4e\x58\x1b\xc2\xdd\x0d\xa1\x7f\x95\xcf\x56\x4c\xb7\x0d\x8f\xa1\xda\xbe\x8b\x38\x35\x23\xf7\x22\x61\xdf\x36\x87\xe9\x45\x54\x55\x7d\x5e\xdf\x6d\xc4\xc4\x9a\x9c\x65\xf8\x78\x5a\x82\x2b\xc7\xf6\xd2\x5f\x46\x8f\xee\x54\xa4\x17\xc3\x29\xc0\xf0\xe4\xb1\x4c\x87\xe8\xee\xb8\xc9\xf5\x1f\x00\x00\xff\xff\xd5\xb7\xc9\x19\x6f\x00\x00\x00")

func templatesGoModBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoMod,
		"templates/go.mod",
	)
}

func templatesGoMod() (*asset, error) {
	bytes, err := templatesGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.mod", size: 111, mode: os.FileMode(420), modTime: time.Unix(1580761728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x49\x8f\xab\x48\xbe\xc5\xf7\xfd\x29\x6a\x6f\x91\xc4\x08\xc1\x93\x7a\x81\xb1\x8d\x27\x3c\x60\x3c\x6e\x9e\x20\x08\x30\x66\x34\x83\x0d\xfe\xf4\x4f\xce\x5b\xea\x67\x67\xdd\xbe\x59\xea\xae\x5a\xe5\x22\xa5\xf3\x8b\xf3\x1f\x0e\x11\xe6\x49\xde\xf8\x1f\x61\x9e\x87\x89\xf8\xe0\x79\x2a\x87\xf9\x6f\x37\xf0\x81\x94\x0f\x20\x87\xf9\x47\x9a\xfb\xbf\x9d\xe1\xff\xb8\xeb\xed\x31\x3e\x3c\x76\x55\x13\x58\xbd\xc1\x7d\x04\xdd\x61\x0f\xb4\x01\xdf\xf6\xa8\x32\xbd\x1b\xee\x3c\xe2\x31\x30\x92\xd4\x72\xee\xff\xfc\x47\x18\xd5\xe7\xc6\xfb\x14\xeb\x37\x65\x56\x6f\x9a\xea\x1c\xc9\x75\x9e\x26\x4f\x65\xfc\x01\x5f\x84\xdb\xf1\xde\x58\x98\x97\x3e\xcd\xaf\xd1\xa0\x64\x8f\x20\xcb\xb1\x35\x6e\x04\x1a\xd7\xb4\x9a\xf4\xe3\xaa\x00\xf8\xca\xbb\x60\x6f\x6d\xdf\x84\xb9\xc8\xaa\xa6\x92\xa2\xac\xaa\xcb\x26\x15\x59\xed\xd6\x51\x9e\xc9\x79\x21\xb2\xdf\xff\x55\x94\x79\xfd\xc3\xca\x1b\x30\x50\x66\xab\x34\x2a\xf3\x4b\x3b\xd3\x21\x2a\xb3\xee\xba\xd4\x69\xbf\x3f\x27\x4b\x8d\xe1\x65\x20\xcc\xd5\xf5\x32\xde\x6f\x9c\x4c\x7c\x01\x26\x91\xc8\x6a\x4d\x4e\xa3\xaa\x2a\x44\xf2\xbb\x15\xf2\xa2\x7c\xbd\x28\x97\x89\x61\xe0\xb5\xfa\x18\x9d\x6e\xbb\x7d\xae\xce\xe6\xfa\xc3\xc0\x5d\x4b\x4d\x35\xee\x6e\x9b\x41\xcc\x35\x50\x14\xab\xee\xbd\x46\x22\xbb\xe5\x5d\x51\xe6\x6d\x27\x87\xb9\xc4\xf3\xac\x2e\xf3\x44\x2a\x12\x37\x13\x4f\x88\xf6\x01\x25\xf0\x81\x00\xd4\x20\x40\x0a\x02\x94\x01\x2a\xd1\x80\x79\x2e\x62\x3e\x21\x2a\x7e\x39\xc2\xd1\x49\x64\x2d\x5d\xb8\xc6\x3d\xb6\x6f\xa9\xe2\x43\x17\x19\xb8\x4b\x47\x5c\x1c\xe5\x81\xd1\xdf\xdd\xaa\xd9\xd9\x1e\x81\x68\xa8\x93\x7f\x77\x84\xcf\xb2\x71\x29\x14\x99\x74\x73\x93\xc8\x77\xeb\xcf\x53\xc0\xb7\x71\x88\x36\x69\xcb\xbb\xcb\xd5\xa9\xa6\xc5\x04\xd9\x64\xe1\x0e\x16\x6a\x2f\x5e\xa0\xdd\x70\x9b\xcd\xe4\x82\xf7\x93\x54\x54\x7a\x39\x52\xf9\x1b\x27\xcc\x13\x37\x0b\xe5\x30\xc9\xc3\xa7\x28\xf8\x00\x12\x02\x50\x01\x10\x29\x08\x53\x0c\x98\x84\xb0\x2f\x02\x22\x14\x0e\x89\xf7\x24\xed\x66\x75\xeb\x7a\xd7\xc3\x29\x1e\x21\x5a\x1c\x35\x11\x07\xf6\x5c\x71\x29\x43\x0e\x59\x61\x55\xc6\xf0\x30\xac\xea\x35\x2d\x28\xfb\x2f\x48\x2f\xd6\x36\xfd\xb1\xda\x85\x6d\xc4\x8a\x60\x9b\xb8\xcb\xd8\xb2\x1a\x7d\x5d\xaf\x26\xdb\x11\x13\x7c\xbf\xa2\x93\x61\x22\x1b\xb6\xba\x5b\xa1\xf5\xcf\x80\x69\xce\xe3\xdf\x6e\xf0\x03\xbe\x0d\x5d\xee\x1c\x9b\x49\xbb\x2c\x4f\xf7\x7a\x15\x09\xa3\x37\x86\x8d\x3e\x2e\xf8\x7c\x94\x0d\x3b\xdd\xdc\x0d\xe6\x72\x4c\xd4\x69\xe0\xa5\x40\xff\x99\xe8\x67\x4f\xbc\x26\x78\x0a\xa3\xb7\x46\x28\xc9\x3a\x55\x35\xaf\x97\x1c\x22\x2b\xb8\x85\x32\x3f\xa5\x60\x63\xe6\xc1\x65\x62\x5c\x77\xfd\x6d\x5d\xae\x68\x37\xb5\xd2\x89\x01\xb7\xdf\x09\xe3\x0f\xf4\xa9\x98\x55\xab\xe3\xe3\x7c\xa5\xb1\x2d\xce\xca\x7a\x92\x4e\x70\x4c\xaf\xfb\xc7\x92\xac\x86\xde\xcd\x9b\xec\x11\xbf\x6f\x02\x5b\x56\xda\xea\x4f\x28\xfe\x25\x47\x7d\x46\xd3\xe7\x6a\xa4\xc5\x8f\x7d\x06\x4f\xbd\x9e\xef\xac\xd9\xe0\xb4\x9e\x3e\x80\xe5\xc9\xe3\xcb\x28\x89\x8b\x7a\x03\x47\x62\x4d\xf8\x7e\x93\x2d\x34\x02\x47\xcc\x1d\x9a\x64\xf3\xb5\x51\x7f\xd4\x7b\x6d\xd5\xe1\x11\x58\x79\x31\x63\x53\xfd\x92\x1c\xb5\x76\x44\x6e\xe3\xcd\x4e\xdf\xb8\xa0\x9b\x77\x07\x75\x93\xd5\xf3\x25\x75\xaf\xf6\x0c\x58\x6f\xb2\x45\x99\xa7\xa2\x3e\x8b\xa6\xfa\x3d\x2a\xfe\x37\xcd\x7d\x91\xbc\x0c\x9f\x06\x18\x44\x90\x12\x44\xa0\x04\x49\x20\x80\x0f\x3d\x00\xfd\xd7\x08\x69\xad\x09\xa4\x3a\xd8\xae\xaa\x41\x35\x9c\x55\xd6\x42\xeb\x5a\x91\x4e\xf2\x63\xac\x38\x29\x32\xa0\x59\x1f\x4d\x3f\x30\xeb\xfa\xfa\x9c\x93\xcf\x8a\x7f\xe4\x65\x28\xb7\x32\x2f\xbb\xe2\x47\xdc\xfd\x8b\x86\x01\x43\x08\xaa\x90\x49\x1c\x31\x82\x05\x80\xbe\xe6\xbe\x76\xc4\xbf\x2c\x42\x3e\x2c\xa1\x6c\x00\xaa\x1b\x71\x08\xa3\x79\x10\x4d\xb7\x74\x58\x28\x70\xbd\x8d\xcd\x3d\xbb\x16\x7e\x55\x4d\x40\xef\xfe\x85\x26\xda\xe2\x0d\x05\x11\x84\x2a\xd2\x20\x95\x28\xd0\x02\xe1\x89\x80\x31\xf7\xd5\x98\x31\x05\xee\x7e\x63\x01\xaa\x22\x80\xe7\x81\x32\x99\xf7\x02\xcd\x81\x91\xa3\x99\xfd\x6e\xd0\x06\xa7\x99\xbe\x76\x0c\x1b\xc7\xeb\xaf\xc6\x92\x28\xab\x5f\x58\xec\x19\x82\x50\xc3\x00\x50\x89\x2b\x2a\x00\x88\x7b\x18\xf2\xd7\x10\xdc\xee\xfc\x6c\x00\xcd\x54\x69\xc7\xf6\xc2\x38\x3a\xb1\xbd\x45\xf2\x65\xd8\x24\xc1\x18\xb3\x19\x9f\xec\xbb\x42\x36\x75\x2b\xbc\xe5\xc3\x5f\xb3\x34\x80\x90\x0a\x55\x82\x9f\x81\xeb\x61\xa1\xb8\x94\x72\x4d\x79\x5d\xec\xbb\x38\xe7\xcd\xc2\xc5\xc9\xe2\xee\xee\x0f\xfc\xd6\x56\x16\x3d\xb6\x6b\xda\xad\x93\x9d\x41\x5c\x30\xd3\x2d\xa3\xa9\x0e\xc5\x2a\xdf\x7e\xc7\xc2\x10\x43\x8a\x55\xc4\x24\x1f\x40\x00\x3c\xc5\xf3\x99\xf7\xea\x4b\xd9\xec\xc1\xd8\xb8\xc8\x21\x84\xa3\xf0\x58\x8f\x93\x70\x7b\xdc\xde\x8d\x78\x12\x88\xe5\x88\x69\x39\x9f\xd8\x0f\x73\x29\xb3\x5b\xcc\xbf\xb0\x32\xf1\x56\x42\xa0\x22\x82\x30\x61\x00\x4b\x58\x51\xb1\x20\xc0\x73\x11\xa2\x2f\xa8\x74\x0e\x17\xb2\x83\x6b\x77\x3d\x8e\x07\x87\x4a\xc5\xe5\x69\x7a\xaf\xb7\xe7\x11\xbe\xe3\xa0\x4e\xef\xf7\xea\x0a\xfa\xdb\x54\xb7\x2b\xf2\x0d\x8a\xa1\x67\xe6\x62\x0a\x25\xe6\x12\x08\x84\xea\x29\x98\xf9\x7f\x03\x4a\x03\x08\x62\xa0\x40\x48\x80\x84\x5d\x84\x14\x0a\xb8\xa2\x78\x7f\x0f\x0a\x43\x08\x19\xc6\x14\x4b\x3e\x63\x4c\x55\xa1\xaa\x40\xea\x7e\xc6\xc7\xfe\xa0\x3a\xab\x65\x34\xd2\xad\xc3\xfc\xca\x72\x10\xc5\xfd\x63\x60\x4c\x77\x89\x3d\xee\xf3\x8a\x47\x0e\xf5\x0e\xcb\x72\xac\x20\xf6\x1f\x31\x5e\xec\xd4\xda\xd8\xac\x03\x36\x5e\x2e\x5a\x2a\x1c\x54\xd6\x99\x7a\x55\x84\x73\x9d\x18\xc7\xeb\x76\x97\xcd\x2a\x5c\x9f\xa7\x39\x5e\x17\x49\xf8\x05\x95\xbb\x4d\x7d\x46\x5f\xfa\x04\x11\x44\x18\x63\xc9\x47\x42\x41\x00\x11\xcc\x3c\xf1\x42\x5b\xc8\x40\x28\x87\x24\x6d\xc4\x75\x76\xd1\xcd\x36\x5f\x36\xc1\xae\x62\xeb\xb1\x69\x97\xcd\x76\x9d\x29\xdd\xfe\x88\xdd\x5e\xcf\x01\x5f\x27\xbd\xea\x32\xfe\xc6\xc2\x90\x40\x06\x20\x51\x24\xe8\x2b\x40\x10\x05\x40\xae\x04\x2f\x2c\xbb\xb5\x42\x71\xa7\xbb\x69\xfb\x68\x04\x95\x2f\x53\x67\x48\x1b\x71\x29\x2e\xbb\x64\x29\xe4\xe8\x51\xf6\x55\x30\xcd\x03\x15\xb9\xd6\x37\x2c\x08\x01\x03\x10\x10\x0c\x25\x82\x3c\x0c\x55\xa6\x52\x1f\xfc\x2d\x2c\x0d\x10\x84\x01\x22\x0c\x02\x09\x42\x84\x30\x80\x1a\xe2\x94\xfd\x45\xac\xea\xbd\x5d\x18\x40\x0a\x29\x06\x12\xd1\x30\xa3\x42\x11\x90\xa2\xd7\x6c\xdf\x38\x2b\x36\xb8\x0d\x3a\x2e\xfb\x13\xea\x31\x87\x9e\xab\x73\x1d\x5f\x36\xbd\x21\x41\x4e\xd6\x55\x0b\x63\xbb\xf2\x2f\x3c\x32\xcf\xc7\x5f\xa2\x9e\x6b\x45\x21\x41\x1a\xd1\x24\x1f\x78\x10\x7a\xbe\xeb\x72\xf6\x39\xeb\xb0\x6f\xce\x0f\x17\x71\x24\x6e\xbc\x3b\x98\xa1\x67\x68\xe3\x26\x74\xf0\xf4\x86\xcf\xc6\x04\x3c\xa8\x92\x4f\x6d\x7a\xd3\xad\xb0\xff\xc7\x91\xf8\x33\x8c\xbf\xc4\x4e\x2d\xda\xfa\xc7\x5d\xfd\xf3\xd6\x10\x2a\xb0\x7e\xd4\x43\x7a\x15\xe6\x9a\x69\x75\xaa\x2c\x9c\xcb\xc5\xd2\x76\xab\x49\x0a\x18\xcb\x7d\x98\x28\xee\x26\x2f\xf7\xf6\xfe\xeb\xd2\xbc\x08\xbd\xae\xc5\xd5\x62\xc3\xed\x72\x0b\x49\x76\x89\xa7\x38\xb8\x5a\xfb\x5e\xc1\x95\xb9\x9f\xdd\xcf\x91\x3c\xb9\x14\xf7\x71\xad\x76\x5d\x73\x5f\xae\xbf\xea\xe5\x79\xf2\x5e\x05\x08\x09\x42\x08\x13\x2a\x79\x01\xd0\x00\x81\xaa\xef\xb2\xd7\xbb\x69\xa6\x2e\x8c\xc6\xe7\x7d\x39\x1b\x3e\xda\x9d\x99\xce\xbd\xc1\xfe\x48\x8b\x60\xef\xcc\xaf\x7d\x6e\xa0\xd9\x49\xb9\x74\xc7\x9b\x45\xd2\xef\x61\xe8\xf3\x2d\x01\x29\x92\x02\x15\xa9\x9e\x08\x84\x4a\x19\x7f\x81\x69\xc7\x44\x6d\x2f\x2e\x38\x65\x57\x1c\x8d\xce\x78\x9c\x4f\xca\xdc\x3f\x68\xf9\xc2\x3a\xdc\x7c\x2e\x16\x8f\x64\x6b\xb3\xc7\xc5\xba\xfd\xa1\xe4\x7f\x80\x61\xf8\x4c\x17\xed\xb9\xf1\x50\xa3\x14\xaa\xd8\xf3\xfd\xd7\x68\x9e\x1b\x8f\x9d\xb9\x74\x6d\xa5\x3d\x2c\x2f\xf1\x1a\xe7\x59\x03\x47\xd3\xe1\xa8\x04\x9b\x3d\x0c\x0d\x95\xcf\x62\xd8\x8c\x58\x6c\xda\xd5\xb7\x30\x8a\x08\x24\x00\x43\x24\x21\x0e\x5c\xa1\x02\xa0\x40\xfc\xfa\x75\xb3\xc3\xcb\x56\x4b\xc3\xfe\xe1\x14\x5d\x8f\xe3\x7e\xd6\x1e\xdc\xe6\x04\xcd\x1b\x1c\x8e\xc7\xfa\x43\x9b\x5d\x76\xd1\x5a\x65\x6d\xff\x00\x3e\xcb\xf8\xf9\x32\x7e\x61\xba\x45\x21\xb2\x30\x7a\xbe\xce\xe0\x97\x77\xd1\xd0\x1b\x56\x40\xdf\xdd\x18\x3a\xb7\xe8\xbe\x58\xfb\xe6\x2a\xdc\x4e\x68\x72\x7e\xe8\xb2\x09\x06\xda\xf1\x9e\x4c\x0f\x73\x8a\xa6\xb1\xf5\xad\x32\x79\x53\x6e\x0b\x3e\xb5\xe7\x1e\x28\xe5\x32\x1b\x66\x15\x18\x4c\x66\xc7\xe3\xad\xb7\xbf\x1c\x0d\xbf\x19\x57\x65\xec\xa8\xf2\xb0\x4f\x0f\xc3\x1b\xf9\x99\x72\x28\xb2\x7f\xbd\x87\xff\x3f\x44\xa0\x0a\x29\x54\x90\x2a\x71\x45\x61\x2a\xe0\x00\xf1\xe0\x35\xaf\xa6\xd1\x42\x5d\xb4\xb9\x3e\x37\xd3\xe8\x14\x34\xaa\xa1\x8f\x49\x79\x38\x87\xb5\xed\xcc\x9d\x36\xa8\x45\x9a\x4c\x40\xb5\x4f\xdb\x94\xff\x49\xe8\xf3\x0e\xac\x3d\xff\x12\x28\x21\x12\xb8\xc4\x43\x0a\xe4\x94\x7e\xae\xe6\x66\x3a\x69\xe1\x66\x70\xcf\xf2\x1e\x1a\x26\xe6\x59\x27\xbd\xab\x89\x1e\x23\x4d\xbd\x46\xdb\x87\x63\xf5\xca\x35\x88\x93\xfe\x92\x0f\xff\x4b\xda\x8b\xc5\x81\xd5\x1f\x2f\x13\x8d\xe9\xe1\x83\xf4\x07\xc3\x66\x16\x8b\x47\x58\xb9\x79\x65\xd8\xb6\xa8\x76\x59\x05\x5d\x3c\x45\xa7\xca\x5a\xfc\xdc\x62\x59\xf0\xcf\x31\xd0\xde\xba\x95\x5e\x1b\x32\xf7\x06\x4e\x43\x0e\xe6\xec\x5c\x92\xd4\x7e\x6c\xab\xd4\x22\x76\xbd\xcb\x45\xea\x6c\x8e\x0c\xea\xed\x29\x1a\x94\xec\x97\xaa\xe8\x3d\x6b\x8e\xb4\x5b\xeb\xcb\x3a\x0a\xe6\xb0\x6b\xbd\x9c\xde\xaf\x9d\xd2\x6f\x4f\x37\x76\xd3\xb7\xe6\xfa\x7e\xe8\x2f\xf5\x79\xe7\xf2\xa1\xd7\x86\xbf\x54\x55\x7f\x44\x61\x69\x1f\xed\x91\xb5\x0b\xed\x9b\x32\x04\x03\x15\x6c\xe2\x2e\xa8\x4a\xc4\xea\xc1\x61\xd2\x34\xab\x53\xb7\x37\xad\x95\x6f\xf1\xec\xf0\xad\xdc\xeb\xaf\x20\x5e\xd6\x76\xcb\x74\xd9\x96\x6b\x57\x1d\x45\x8f\x4d\x38\xee\xd9\xa2\x1f\x3c\xa6\xa5\x71\x84\xc5\x66\xa1\xce\x0e\xfd\x0d\x73\x3d\x27\xfe\xe7\x3f\xce\x79\x96\x89\xe0\x83\xe7\x72\x98\xff\x2c\x10\x01\x02\x94\x60\x84\x25\x8e\x02\x0d\xbb\x9a\xe2\x01\x4d\x7b\x81\x95\x01\x4e\x4c\xd2\xb7\x27\xde\xc2\x0d\xa6\xfb\xb3\x1e\xe8\xbe\x27\x8b\xd5\xa9\xad\x6c\x99\xd8\xf5\x62\xbc\xce\x79\x7b\x8f\xb5\x92\x7c\x0b\xa3\x08\x3f\x3f\xab\x14\x48\xc2\xd5\xa8\xe7\x07\x3e\xd5\x02\xfe\x9f\xc2\xfe\x2f\x00\x00\xff\xff\x35\x15\x42\x58\x57\x13\x00\x00")

func templatesGoSumBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoSum,
		"templates/go.sum",
	)
}

func templatesGoSum() (*asset, error) {
	bytes, err := templatesGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.sum", size: 4951, mode: os.FileMode(420), modTime: time.Unix(1580761750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x6a\x04\x21\x10\x86\x6b\xe7\x29\x26\x03\x01\x85\xc3\xf4\x1b\xb6\x48\x93\x2a\x5c\x93\x27\x90\xdd\x59\x91\x9b\xd3\x45\xcd\x6d\xb1\xf8\xee\x41\x8b\x14\xa9\xae\x9c\x81\xef\xfb\xfe\xdd\x2d\x37\xe7\x19\xef\x2e\x44\x80\x70\xdf\x53\xae\xa8\x41\x91\x24\x4f\xa0\x28\x72\x25\x00\x45\x3e\x25\x2f\x6c\x7d\x12\x17\xbd\x4d\xd9\xbf\xf9\xbc\x2f\x04\x06\x60\xfb\x89\xcb\xe0\xb5\xc1\x13\x94\x84\x72\x41\xce\x19\xa7\x19\x23\x57\xfb\x15\x4a\xe5\xa8\xe9\x3c\xed\x95\xeb\x91\xf2\xad\x35\xba\x60\xbf\x3f\xd6\x35\x73\x29\xad\x91\x01\x15\xb6\x41\xbd\xcc\x18\x83\x74\x91\x92\xe4\xed\xa7\xab\x4e\x36\x4d\x9b\x0b\xc2\x2b\xd6\x84\x32\x7c\x13\xbe\x3e\x68\x74\x0c\xa8\x06\xaa\xf4\x5c\x9f\x64\xaf\x7c\x7c\x73\x7e\x70\xd6\x06\xfe\xac\xd3\x8c\xc5\x8e\xb7\x96\x50\xcc\xfb\x73\xa9\xd2\x81\x7f\xa5\x06\xbf\x01\x00\x00\xff\xff\x68\x9e\x43\x7d\x33\x01\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 307, mode: os.FileMode(420), modTime: time.Unix(1580751348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore":         templatesGitignore,
	"templates/.modules":           templatesModules,
	"templates/Dockerfile":         templatesDockerfile,
	"templates/Makefile":           templatesMakefile,
	"templates/README.md":          templatesReadmeMd,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/go.mod":             templatesGoMod,
	"templates/go.sum":             templatesGoSum,
	"templates/main.go":            templatesMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore":         &bintree{templatesGitignore, map[string]*bintree{}},
		".modules":           &bintree{templatesModules, map[string]*bintree{}},
		"Dockerfile":         &bintree{templatesDockerfile, map[string]*bintree{}},
		"Makefile":           &bintree{templatesMakefile, map[string]*bintree{}},
		"README.md":          &bintree{templatesReadmeMd, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"go.mod":             &bintree{templatesGoMod, map[string]*bintree{}},
		"go.sum":             &bintree{templatesGoSum, map[string]*bintree{}},
		"main.go":            &bintree{templatesMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
