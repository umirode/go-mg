// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/.gitignore
// templates/Dockerfile
// templates/README.md
// templates/docker-compose.yml
// templates/go.mod
// templates/go.sum
// templates/main.go
// templates/prot.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xc7\xc1\x0a\x02\x20\x0c\x00\xd0\xfb\x60\xff\x30\xe8\x52\x1d\xe6\x47\xf4\x21\xa1\x38\x6c\xa0\x6e\x4c\x0d\xea\xeb\xbb\x75\x7c\x17\x7a\x84\xe4\x2d\x95\xca\x87\x58\xdb\xb4\x10\x5a\xc7\xdd\x62\x93\xf7\xd3\x74\xd2\xf5\xb5\xbe\x3c\xac\xe8\x0d\xe1\x2d\xb3\x5a\x24\x04\x0f\xdb\xcf\xbf\xee\xac\xa3\x23\xb0\x56\xc9\x09\xe1\x17\x00\x00\xff\xff\x63\xd9\x24\x3f\x56\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 86, mode: os.FileMode(438), modTime: time.Unix(1583863516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x61\x6b\xdb\x30\x10\xfd\x5e\xe8\x7f\xb8\xb9\xa3\x69\x0b\xb2\x62\x06\xfb\x10\xc8\x87\xae\xf1\x4a\x59\x1b\x17\xa7\xd9\x28\x6d\x33\x14\x49\x91\xc5\x64\x9d\x91\x64\xd2\x95\xfd\xf8\x21\xbb\xc9\x42\xd6\xed\x83\xd1\xf9\x78\xef\xe9\xf4\xee\x7d\x2e\x8b\x1b\x50\x68\x98\x55\xa3\x2c\xcd\x3e\xa4\x1f\x09\x33\x8d\xb6\x12\xce\x67\xb0\x6c\xb5\x11\xd2\x1d\x1e\x1c\x1e\xe4\xd3\xaf\x70\x59\x64\x59\x76\x53\x4c\xe6\xd7\xf9\x18\x6d\xdf\xbb\xb8\x2c\xbe\xe7\xd3\xf3\x4f\xd7\xf9\x64\x3c\xdc\xc0\x8a\xd9\xd8\x68\xdb\x3e\x47\x62\x39\x9f\x02\x6b\x7e\x00\x13\x02\x08\xb1\x48\x38\xe3\x95\x04\xa5\x03\x34\x0e\x03\x72\xe0\x8c\x70\xe9\x82\x5e\x69\xce\x82\xf4\x10\x5e\x04\x0b\x0c\xb0\x91\xd6\xfb\x0a\x8e\x8f\xe1\xf1\xf0\x00\x00\x40\x21\x28\x19\x22\xb5\x6a\x97\x29\xc7\x9a\xf6\x83\xd3\x4e\x68\xd9\xae\xfa\x82\x13\x25\x2d\x51\xf8\x37\x93\xb4\xbb\xe4\xb6\xd6\x0e\x85\xec\x48\x3b\xd8\xd7\x83\x09\xd1\x7a\xe9\x80\x78\xa0\x4b\x6d\x69\x70\xad\x8c\x02\xd9\x70\x38\x04\x32\x01\x52\x01\x65\x4d\x03\xf1\xfb\x43\xf6\x52\x00\xd1\x40\x1c\x24\x74\x71\xc2\x9a\xe6\x97\x43\x0c\xa7\xf4\x9d\x48\x80\xca\xc0\xa9\x72\xd8\x36\x7d\xd9\x30\xef\xd7\xe2\x4d\xf2\xc0\x1f\x2d\x4e\xd2\xb3\xd3\xd1\xc3\x62\xf4\x74\xf6\xfe\xe8\x31\x1b\x51\x1f\xa7\xb0\x68\x50\x69\x7b\x34\xd8\x95\x88\x36\x7f\x2b\xca\x2f\x93\xab\xb2\x9b\x29\xfe\x5f\x14\xb7\xf7\x9d\xc1\xe9\x4f\x56\x1b\x48\x69\xbf\x89\xee\xad\xda\xfa\xc0\x8c\xd9\xc2\x14\xa6\x35\x8a\x78\xf8\xb6\xde\x42\x15\x42\xec\x0a\x5c\x5b\x83\x4c\x6c\xd1\x29\xa4\x9b\xbd\x2a\xec\x23\x02\xc4\x88\x95\x61\xca\xc3\x80\xac\xa3\x63\x44\x3e\x87\x4d\x2b\x21\x3e\xb0\xa0\x79\x32\x00\x82\xdd\x7c\xd1\xcf\x5e\xa4\x4b\x9f\xe7\x8e\x05\x5e\x6d\x2f\x20\x64\xe5\xb0\x1e\xbf\x86\x0f\x68\xeb\x1d\xf5\x15\x73\x92\xbe\xa0\x95\xda\xae\xf0\xad\xde\x3f\xc8\x3b\x46\xef\xfb\xef\x2b\x26\x70\xdd\xd7\xff\x61\x7b\x6f\x68\xcc\xa7\xa7\x7b\x41\x4d\xb9\x0b\xfb\x90\xf8\x88\xf9\x2c\x2f\x61\x77\x0d\xfb\xaa\x1b\x0b\x36\xbb\xca\xa7\x77\xe5\xfd\x6d\x71\x35\xbd\x83\x87\x24\x36\x93\xa7\xdf\x01\x00\x00\xff\xff\x36\xca\x07\xda\x97\x03\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 919, mode: os.FileMode(438), modTime: time.Unix(1583863516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x4a\x03\x41\x10\x45\xf7\x0d\x7d\x87\x0f\xb3\x51\x30\x73\x07\x57\xee\xc4\x85\x07\x98\xce\x74\x4d\xa6\xb0\xbb\x2a\x54\x75\x2b\x21\xe4\xee\x32\x11\x85\xc1\x5d\x51\x3c\xde\x7f\x03\xae\xd7\xf1\x35\x55\xba\xdd\x50\x79\x36\x75\xb2\x4f\x9e\x29\x86\x18\x86\x01\x6f\xa6\x4d\x8f\x7d\xc1\xc2\x85\x3c\x86\xe7\x9c\x71\xd1\x6e\x30\x3a\xab\x73\x53\x63\x72\x7c\x71\x5b\x71\xde\xa1\x60\xc1\x34\x56\xcd\xbd\x90\x4f\xf7\x1f\x1e\x54\x08\x85\x85\x70\xc0\x76\xfe\x39\x2e\x8f\x63\x0c\xef\x2b\x09\xac\x0b\xa6\x9a\x3e\x08\x2c\xde\x52\x29\x87\x5f\xc5\x13\xda\xca\x8e\x59\x6b\x4d\x92\x51\x34\xe5\x7d\xc4\x62\x5a\xff\x4d\x6e\xe8\x89\x84\x2c\x35\xc2\x8b\x96\x24\x27\xcc\x9a\x09\xc7\xe4\x94\xa1\x5b\xe4\x3d\xfc\x87\xf7\x31\x86\xef\x00\x00\x00\xff\xff\x5f\x0f\x3d\x9e\x12\x01\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 274, mode: os.FileMode(438), modTime: time.Unix(1583863516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8a\xbb\x0d\xc2\x40\x0c\x86\xfb\x48\xd9\xe1\xef\x52\x71\x4d\x3a\x0f\x81\x58\xc1\x80\x8b\x93\x02\x8e\x6c\x13\x40\x27\xef\x8e\xe0\xa8\x10\xe5\xf7\xd8\xc4\xbc\xea\x95\x30\xcd\x65\x9e\xc6\xc1\xc5\xb6\x7a\x12\xa7\x71\x00\x5a\x2b\x7b\xbe\x48\xe6\x87\x80\xe3\xad\x2e\x67\x42\xe9\x24\x8f\x55\x5d\xbe\x09\xd8\xbd\xf7\x83\x5a\x64\x76\xb5\xaa\x85\xff\xcb\xf4\x33\x9a\x78\xb0\x05\x81\x97\x3b\x3f\xfd\x15\x00\x00\xff\xff\x9d\x29\xd3\xa9\x93\x00\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 147, mode: os.FileMode(438), modTime: time.Unix(1583866885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa6\xc8\x04\xd1\xea\xc1\x2d\xdc\xa1\x68\xf8\x08\xad\x5f\x03\xf5\x52\xba\xbb\xaf\xf2\x6c\xc5\xb5\x77\xdb\x73\xf5\x31\x44\x40\x4d\x96\x56\x91\xf0\xb7\x5d\xe1\x0a\x12\xc5\x0d\x2c\xf9\x86\x31\x30\x21\x9e\x43\xbf\x64\xcb\x66\xb3\xfc\x01\x00\x00\xff\xff\x52\x09\x4f\xa2\x42\x00\x00\x00")

func templatesGoModBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoMod,
		"templates/go.mod",
	)
}

func templatesGoMod() (*asset, error) {
	bytes, err := templatesGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.mod", size: 66, mode: os.FileMode(438), modTime: time.Unix(1583863675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xc9\x8e\xab\x48\x9f\xc5\xf7\x9f\xf4\xbd\x43\xed\x2d\x92\x18\x21\x68\xa9\x16\x18\xdb\x78\xc2\x03\xc6\xe3\xa6\x05\x41\x80\x31\xa3\x19\x6c\xf0\xd3\xb7\x9c\xb7\x54\xed\xbc\x79\xab\xf2\xaa\x86\x55\x2e\x52\x3a\xbf\x38\xff\xe1\x10\x61\x9e\xe4\x8d\xff\x16\xe6\x79\x98\x88\x37\x9e\xa7\x72\x98\xff\x72\x03\x6f\x48\x79\x03\x72\x98\xbf\xa5\xb9\xff\xcb\x19\xfe\x8f\xbb\xde\x1e\xe3\xc3\x63\x57\x35\x81\xd5\x1b\xdc\x47\xd0\x1d\xf6\x40\x1b\xf0\x6d\x8f\x2a\xd3\xbb\xe1\xce\x23\x1e\x03\x23\x49\x2d\xe7\xfe\xeb\x7f\xff\x13\x46\xf5\xb9\xf1\xde\xd5\xfa\x4d\x99\xd5\x9b\xa6\x3a\x47\x72\x9d\xa7\xc9\x53\x1a\xbf\xc1\x17\xe5\x76\xbc\x37\x16\xe6\xa5\x4f\xf3\x6b\x34\x28\xd9\x23\xc8\x72\x6c\x8d\x1b\x81\xc6\x35\xad\x26\xfd\xb8\x2a\x00\xbe\xf2\x2e\xd8\x5b\xdb\x8f\xca\x5c\x64\x55\x53\x49\x51\x56\xd5\x65\x93\x8a\xac\x76\xeb\x28\xcf\xe4\xbc\x10\xd9\x6f\xff\x2a\xca\xbc\xfe\x66\xe6\x03\x31\x50\x66\xab\x34\x2a\xf3\x4b\x3b\xd3\x21\x2a\xb3\xee\xba\xd4\x69\xbf\x3f\x27\x4b\x8d\xe1\x65\x20\xcc\xd5\xf5\x32\xde\x6f\x9c\x4c\x7c\x4f\x4c\x22\x91\xd5\x9a\x9c\x46\x55\x55\x88\xe4\x37\x33\xe4\x45\xfa\x7a\x51\x2e\x13\xc3\xc0\x6b\xf5\x31\x3a\xdd\x76\xfb\x5c\x9d\xcd\xf5\x87\x81\xbb\x96\x9a\x6a\xdc\xdd\x36\x83\x98\x6b\xa0\x28\x56\xdd\x77\x65\x12\xd9\x2d\xef\x8a\x32\x6f\x3b\x39\xcc\x25\x9e\x67\x75\x99\x27\x52\x91\xb8\x99\x78\x52\xb4\x37\x28\x81\x37\x04\xa0\x06\x01\x52\x10\xa0\x0c\x50\x89\x06\xcc\x73\x11\xf3\x09\x51\xf1\xcb\x19\x8e\x4e\x22\x6b\xe9\xc2\x35\xee\xb1\x7d\x4b\x15\x1f\xba\xc8\xc0\x5d\x3a\xe2\xe2\x28\x0f\x8c\xfe\xee\x56\xcd\xce\xf6\x08\x44\x43\x9d\xfc\xe1\x19\xde\x2b\xc7\xa5\x50\x64\xd2\xcd\x4d\x22\xdf\xad\xdf\x8f\x01\x3f\xcc\x44\xb4\x49\x5b\xde\x5d\xae\x4e\x35\x2d\x26\xc8\x26\x0b\x77\xb0\x50\x7b\xf1\x02\xed\x86\xdb\x6c\x26\x17\xbc\x9f\xa4\xa2\xd2\xcb\x91\xca\x3f\x82\xc2\x3c\x71\xb3\x50\x0e\x93\x3c\x7c\xaa\x82\x37\x20\x21\x00\x15\x00\x91\x82\x30\xc5\x80\x49\x08\xfb\x22\x20\x42\xe1\x90\x78\x4f\xd4\x6e\x56\xb7\xae\x77\x3d\x9c\xe2\x11\xa2\xc5\x51\x13\x71\x60\xcf\x15\x97\x32\xe4\x90\x15\x56\x65\x0c\x0f\xc3\xaa\x5e\xd3\x82\xb2\xbf\x83\x7a\x31\xb7\xe9\x8f\xd5\x2e\x6c\x23\x56\x04\xdb\xc4\x5d\xc6\x96\xd5\xe8\xeb\x7a\x35\xd9\x8e\x98\xe0\xfb\x15\x9d\x0c\x13\xd9\xb0\xd5\xdd\x0a\xad\x7f\x48\x4c\x73\x1e\xff\x72\x83\x6f\xf0\xc3\xe8\xe5\xce\xb1\x99\xb4\xcb\xf2\x74\xaf\x57\x91\x30\x7a\x63\xd8\xe8\xe3\x82\xcf\x47\xd9\xb0\xd3\xcd\xdd\x60\x2e\xc7\x44\x9d\x06\x5e\x0a\xf4\x1f\xaa\xbe\xf7\xc5\x6b\x82\xa7\x32\xfa\xd0\x0c\x25\x59\xa7\xaa\xe6\xf5\x92\x43\x64\x05\xb7\x50\xe6\xa7\x14\x6c\xcc\x3c\xb8\x4c\x8c\xeb\xae\xbf\xad\xcb\x15\xed\xa6\x56\x3a\x31\xe0\xf6\x4b\x65\xfc\x86\xde\x25\xb3\x6a\x75\x7c\x9c\xaf\x34\xb6\xc5\x59\x59\x4f\xd2\x09\x8e\xe9\x75\xff\x58\x92\xd5\xd0\xbb\x79\x93\x3d\xe2\xf7\x4d\x60\xcb\x4a\x5b\xfd\x8c\xe4\x3f\x73\xd8\x67\x4c\xbd\xaf\x48\x5a\x7c\xdb\x6c\xf0\x14\xec\xf9\xce\x9a\x0d\x4e\xeb\xe9\x03\x58\x9e\x3c\xbe\x8c\x92\xb8\xa8\x37\x70\x24\xd6\x84\xef\x37\xd9\x42\x23\x70\xc4\xdc\xa1\x49\x36\x9f\xba\xf5\x59\xf0\xb5\x5f\x87\x47\x60\xe5\xc5\x8c\x4d\xf5\x4b\x72\xd4\xda\x11\xb9\x8d\x37\x3b\x7d\xe3\x82\x6e\xde\x1d\xd4\x4d\x56\xcf\x97\xd4\xbd\xda\x33\x60\x7d\xd4\x2d\xca\x3c\x15\xf5\x59\x34\xd5\x6f\xa9\xf1\xbf\x69\xee\x8b\xe4\x65\x06\x35\xc0\x20\x82\x94\x20\x02\x25\x48\x02\x01\x7c\xe8\x01\xe8\xbf\xa6\x49\x6b\x4d\x20\xd5\xc1\x76\x55\x0d\xaa\xe1\xac\xb2\x16\x5a\xd7\x8a\x74\x92\x1f\x63\xc5\x49\x91\x01\xcd\xfa\x68\xfa\x81\x59\xd7\xd7\xf7\x69\x79\xaf\xfa\x5b\x5e\x86\x72\x2b\xf3\xb2\x2b\xbe\x65\xdf\xef\x38\x0c\x18\x42\x50\x85\x4c\xe2\x88\x11\x2c\x00\xf4\x35\xf7\xb5\x2b\xfe\x65\x11\xf2\x61\x09\x65\x03\x50\xdd\x88\x43\x18\xcd\x83\x68\xba\xa5\xc3\x42\x81\xeb\x6d\x6c\xee\xd9\xb5\xf0\xab\x6a\x02\x7a\xf7\xef\x71\xa2\x2d\x3e\xb0\x20\x82\x50\x45\x1a\xa4\x12\x05\x5a\x20\x3c\x11\x30\xe6\xbe\x5a\x33\xa6\xc0\xdd\x6f\x2c\x40\x55\x04\xf0\x3c\x50\x26\xf3\x5e\xa0\x39\x30\x72\x34\xb3\xdf\x0d\xda\xe0\x34\xd3\xd7\x8e\x61\xe3\x78\xfd\xc9\x5a\x12\x65\xf5\x0b\x8c\x3d\x13\x11\x6a\x18\x00\x2a\x71\x45\x05\x00\x71\x0f\x43\xfe\x9a\x88\xdb\x9d\x9f\x0d\xa0\x99\x2a\xed\xd8\x5e\x18\x47\x27\xb6\xb7\x48\xbe\x0c\x9b\x24\x18\x63\x36\xe3\x93\x7d\x57\xc8\xa6\x6e\x85\xb7\x7c\xf8\x05\x4c\x03\x08\xa9\x50\x25\xf8\x19\xbf\x1e\x16\x8a\x4b\x29\xd7\x94\xd7\x15\xbf\x8b\x73\xde\x2c\x5c\x9c\x2c\xee\xee\xfe\xc0\x6f\x6d\x65\xd1\x63\xbb\xa6\xdd\x3a\xd9\x19\xc4\x05\x33\xdd\x32\x9a\xea\x50\xac\xf2\xed\x97\x30\x0c\x31\xa4\x58\x45\x4c\xf2\x01\x04\xc0\x53\x3c\x9f\x79\xaf\xce\x94\xcd\x1e\x8c\x8d\x8b\x1c\x42\x38\x0a\x8f\xf5\x38\x09\xb7\xc7\xed\xdd\x88\x27\x81\x58\x8e\x98\x96\xf3\x89\xfd\x30\x97\x32\xbb\xc5\xfc\x7b\x58\x26\x3e\x54\x11\xa8\x88\x20\x4c\x18\xc0\x12\x56\x54\x2c\x08\xf0\x5c\x84\xe8\x0b\x2b\x9d\xc3\x85\xec\xe0\xda\x5d\x8f\xe3\xc1\xa1\x52\x71\x79\x9a\xde\xeb\xed\x79\x84\xef\x38\xa8\xd3\xfb\xbd\xba\x82\xfe\x36\xd5\xed\x8a\x7c\xc5\x62\xe8\x99\xc0\x98\x42\x89\xb9\x04\x02\xa1\x7a\x0a\x66\xfe\xbf\xc1\xd2\x00\x82\x18\x28\x10\x12\x20\x61\x17\x21\x85\x02\xae\x28\xde\xbf\xc4\xc2\x10\x42\x86\x31\xc5\x92\xcf\x18\x53\x55\xa8\x2a\x90\xba\xef\x41\xb2\x3f\xa8\xce\x6a\x19\x8d\x74\xeb\x30\xbf\xb2\x1c\x44\x71\xff\x18\x18\xd3\x5d\x62\x8f\xfb\xbc\xe2\x91\x43\xbd\xc3\xb2\x1c\x2b\x88\xfd\x35\xc8\x8b\xa1\x5a\x1b\x9b\x75\xc0\xc6\xcb\x45\x4b\x85\x83\xca\x3a\x53\xaf\x8a\x70\xae\x13\xe3\x78\xdd\xee\xb2\x59\x85\xeb\xf3\x34\xc7\xeb\x22\x09\xbf\x67\xe5\x6e\x53\x9f\xd1\x77\xbd\x82\x08\x22\x8c\xb1\xe4\x23\xa1\x20\x80\x08\x66\x9e\x78\xc1\x2d\x64\x20\x94\x43\x92\x36\xe2\x3a\xbb\xe8\x66\x9b\x2f\x9b\x60\x57\xb1\xf5\xd8\xb4\xcb\x66\xbb\xce\x94\x6e\x7f\xc4\x6e\xaf\xe7\x80\x4f\x03\x5f\x75\x19\xff\x00\xc3\x90\x40\x06\x20\x51\x24\xe8\x2b\x40\x10\x05\x40\xae\x04\x2f\x30\xbb\xb5\x42\x71\xa7\xbb\x69\xfb\x68\x04\x95\x2f\x53\x67\x48\x1b\x71\x29\x2e\xbb\x64\x29\xe4\xe8\x51\xf6\x55\x30\xcd\x03\x15\xb9\xd6\x57\x30\x08\x01\x03\x10\x10\x0c\x25\x82\x3c\x0c\x55\xa6\x52\x1f\xfc\x3b\x30\x0d\x10\x84\x01\x22\x0c\x02\x09\x42\x84\x30\x80\x1a\xe2\x94\xfd\x53\xb0\xea\x63\xcb\x30\x80\x14\x52\x0c\x24\xa2\x61\x46\x85\x22\x20\x45\xaf\x49\xbf\x71\x56\x6c\x70\x1b\x74\x5c\xf6\x27\xd4\x63\x0e\x3d\x57\xe7\x3a\xbe\x6c\x7a\x43\x82\x9c\xac\xab\x16\xc6\x76\xe5\x5f\x78\x64\x9e\x8f\x7f\xce\x7a\xae\x17\x85\x04\x69\x44\x93\x7c\xe0\x41\xe8\xf9\xae\xcb\xd9\xfb\xc8\xc3\xbe\x39\x3f\x5c\xc4\x91\xb8\xf1\xee\x60\x86\x9e\xa1\x8d\x9b\xd0\xc1\xd3\x1b\x3e\x1b\x13\xf0\xa0\x4a\x3e\xb5\xe9\x4d\xb7\xc2\xfe\x0f\xe6\xe2\x67\x20\xff\x8c\xa1\x5a\xb4\xf5\xb7\x8b\xfc\xfb\x4d\x22\x54\x60\xfd\xa8\x87\xf4\x2a\xcc\x35\xd3\xea\x54\x59\x38\x97\x8b\xa5\xed\x56\x93\x14\x30\x96\xfb\x30\x51\xdc\x4d\x5e\xee\xed\xfd\xa7\xe5\x79\x51\x7a\x5d\x8f\xab\xc5\x86\xdb\xe5\x16\x92\xec\x12\x4f\x71\x70\xb5\xf6\xbd\x82\x2b\x73\x3f\xbb\x9f\x23\x79\x72\x29\xee\xe3\x5a\xed\xba\xe6\xbe\x5c\x7f\x12\xcc\xf3\xe4\x63\x21\x20\x24\x08\x21\x4c\xa8\xe4\x05\x40\x03\x04\xaa\xbe\xcb\x5e\xaf\xad\x99\xba\x30\x1a\x9f\xf7\xe5\x6c\xf8\x68\x77\x66\x3a\xf7\x06\xfb\x23\x2d\x82\xbd\x33\xbf\xf6\xb9\x81\x66\x27\xe5\xd2\x1d\x6f\x16\x49\x7f\x82\x86\xde\x9f\x1a\x90\x22\x29\x50\x91\xea\x89\x40\xa8\x94\xf1\x17\x9a\x76\x4c\xd4\xf6\xe2\x82\x53\x76\xc5\xd1\xe8\x8c\xc7\xf9\xa4\xcc\xfd\x83\x96\x2f\xac\xc3\xcd\xe7\x62\xf1\x48\xb6\x36\x7b\x5c\xac\xdb\xe7\xb2\x7f\xa2\x61\xf8\x0c\x1a\xed\xb9\xfb\x50\xa3\x14\xaa\xd8\xf3\xfd\xd7\xa0\x9e\x1b\x8f\x9d\xb9\x74\x6d\xa5\x3d\x2c\x2f\xf1\x1a\xe7\x59\x03\x47\xd3\xe1\xa8\x04\x9b\x3d\x0c\x0d\x95\xcf\x62\xd8\x8c\x58\x6c\xda\xd5\xd7\x34\x8a\x08\x24\x00\x43\x24\x21\x0e\x5c\xa1\x02\xa0\x40\xfc\xfa\xb9\xb3\xc3\xcb\x56\x4b\xc3\xfe\xe1\x14\x5d\x8f\xe3\x7e\xd6\x1e\xdc\xe6\x04\xcd\x1b\x1c\x8e\xc7\xfa\x43\x9b\x5d\x76\xd1\x5a\x65\x6d\xff\x00\xbe\x55\xf2\xfd\xfd\xfc\x02\x75\x8b\x42\x64\x61\xf4\x7c\xbf\xc1\xef\x1e\x4e\x43\x6f\x58\x01\x7d\x77\x63\xe8\xdc\xa2\xfb\x62\xed\x9b\xab\x70\x3b\xa1\xc9\xf9\xa1\xcb\x26\x18\x68\xc7\x7b\x32\x3d\xcc\x29\x9a\xc6\xd6\xd7\xd2\xe4\x83\x74\x5b\xf0\xa9\x3d\xf7\x40\x29\x97\xd9\x30\xab\xc0\x60\x32\x3b\x1e\x6f\xbd\xfd\xe5\x68\xf8\xcd\xb8\x2a\x63\x47\x95\x87\x7d\x7a\x18\xde\xc8\x0f\xa5\x43\x91\xfd\xfe\x6a\xfe\xff\x3c\x81\x2a\xa4\x50\x41\xaa\xc4\x15\x85\xa9\x80\x03\xc4\x83\xd7\xec\x9a\x46\x0b\x75\xd1\xe6\xfa\xdc\x4c\xa3\x53\xd0\xa8\x86\x3e\x26\xe5\xe1\x1c\xd6\xb6\x33\x77\xda\xa0\x16\x69\x32\x01\xd5\x3e\x6d\x53\xfe\xb3\xd4\xe7\xf5\x58\x7b\xfe\x25\x50\x42\x24\x70\x89\x87\x14\xc8\x29\x7d\xdf\xd1\xcd\x74\xd2\xc2\xcd\xe0\x9e\xe5\x3d\x34\x4c\xcc\xb3\x4e\x7a\x57\x13\x3d\x46\x9a\x7a\x8d\xb6\x0f\xc7\xea\x95\x6b\x10\x27\xfd\x25\x1f\xfe\x5d\xdc\x8b\xc9\x81\xd5\x1f\x2f\x13\x8d\xe9\xe1\x83\xf4\x07\xc3\x66\x16\x8b\x47\x58\xb9\x79\x65\xd8\xb6\xa8\x76\x59\x05\x5d\x3c\x45\xa7\xca\x5a\xfc\x81\xc9\xb2\xe0\xef\xb3\xa0\x7d\xe8\x58\x7a\x6d\xc8\xdc\x1b\x38\x0d\x39\x98\xb3\x73\x49\x52\xfb\xb1\xad\x52\x8b\xd8\xf5\x2e\x17\xa9\xb3\x39\x32\xa8\xb7\xa7\x68\x50\xb2\x3f\x97\x45\x1f\x63\xe7\x48\xbb\xb5\xbe\xac\xa3\x60\x0e\xbb\xd6\xcb\xe9\xfd\xda\x29\xfd\xf6\x74\x63\x37\x7d\x6b\xae\xef\x87\xfe\x52\x9f\x77\x2e\x1f\x7a\x6d\xf8\xe7\xb2\xea\xb7\x5c\x2c\xed\xa3\x3d\xb2\x76\xa1\x7d\x53\x86\x60\xa0\x82\x4d\xdc\x05\x55\x89\x58\x3d\x38\x4c\x9a\x66\x75\xea\xf6\xa6\xb5\xf2\x2d\x9e\x1d\xbe\xd6\x7b\xfd\xc1\xc4\xcb\xda\x6e\x99\x2e\xdb\x72\xed\xaa\xa3\xe8\xb1\x09\xc7\x3d\x5b\xf4\x83\xc7\xb4\x34\x8e\xb0\xd8\x2c\xd4\xd9\xa1\xbf\x61\xae\xe7\xc4\xbf\xfe\xf7\x3f\xe7\x3c\xcb\x44\xf0\xc6\x73\x39\xcc\x7f\x94\x8e\x00\x01\x4a\x30\xc2\x12\x47\x81\x86\x5d\x4d\xf1\x80\xa6\xbd\xd0\xca\x00\x27\x26\xe9\xdb\x13\x6f\xe1\x06\xd3\xfd\x59\x0f\x74\xdf\x93\xc5\xea\xd4\x56\xb6\x4c\xec\x7a\x31\x5e\xe7\xbc\xbd\xc7\x5a\x49\xbe\xa6\x51\x84\x9f\x5f\x5a\x0a\x24\xe1\x6a\xd4\xf3\x03\x9f\x6a\x01\xff\xcb\xb4\xff\x0b\x00\x00\xff\xff\xe3\x69\x62\x66\x88\x13\x00\x00")

func templatesGoSumBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoSum,
		"templates/go.sum",
	)
}

func templatesGoSum() (*asset, error) {
	bytes, err := templatesGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.sum", size: 5000, mode: os.FileMode(438), modTime: time.Unix(1583863516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x6a\xec\x30\x10\x45\x6b\x09\xf4\x0f\xf3\x06\x1e\xc8\xb0\x28\xbd\x83\x8b\x34\xa9\xc2\x36\xf9\x02\x61\x8f\x85\xd8\x59\xc9\x8c\x94\xdd\xc2\xe8\xdf\x83\x04\xa9\xd2\xa4\x1a\x86\xcb\x3d\xe7\x1e\x7e\xbd\xf9\x40\x70\xf7\x31\x19\x6d\x74\xbc\x1f\x59\x2a\x58\xa3\x15\x72\x0e\xd8\x6f\xa2\x8a\x3d\x53\x18\x72\x0e\x4c\x2e\x64\xf6\x29\xb8\x2c\xe1\x25\xc8\xb1\xa2\xd1\x53\xcf\xf7\xaf\xb4\x0e\x90\x9d\xe0\x34\x5a\x71\x2c\x17\x20\x11\x98\x17\x48\x54\xdd\x47\x2c\x95\x92\xc5\xf3\x74\x57\xaa\xcf\x2c\xb7\xd6\xf0\x02\xfd\x7f\xdb\x36\xa1\x52\x5a\xc3\xc9\x68\x15\xf7\x51\xfb\xb7\x40\x8a\x3c\x50\x8a\x73\x70\xef\xbe\x7a\xde\x2d\xee\x3e\x32\x6d\x50\x33\xf0\x20\xce\xf0\xff\x81\xc3\xd4\xcb\xcd\x68\x55\xba\xb2\x4f\x73\x57\x7a\x7e\x92\x3c\x48\xec\x98\xf8\x83\x9e\x17\x28\x6e\x04\x96\x63\x99\x5e\xff\xe8\x2b\xbd\xf1\x4b\xd7\x8c\xfe\x0e\x00\x00\xff\xff\x60\x55\x96\x33\x47\x01\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 327, mode: os.FileMode(438), modTime: time.Unix(1583863516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x49\xcc\x4b\xb7\x52\x48\xcf\xe7\xe5\xf2\xcd\x4f\x29\xcd\x49\x2d\xb6\xe2\xe5\x02\x04\x00\x00\xff\xff\xe2\x03\x9f\xe0\x14\x00\x00\x00")

func templatesProtYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProtYaml,
		"templates/prot.yaml",
	)
}

func templatesProtYaml() (*asset, error) {
	bytes, err := templatesProtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/prot.yaml", size: 20, mode: os.FileMode(438), modTime: time.Unix(1583866937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore":         templatesGitignore,
	"templates/Dockerfile":         templatesDockerfile,
	"templates/README.md":          templatesReadmeMd,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/go.mod":             templatesGoMod,
	"templates/go.sum":             templatesGoSum,
	"templates/main.go":            templatesMainGo,
	"templates/prot.yaml":          templatesProtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore":         &bintree{templatesGitignore, map[string]*bintree{}},
		"Dockerfile":         &bintree{templatesDockerfile, map[string]*bintree{}},
		"README.md":          &bintree{templatesReadmeMd, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"go.mod":             &bintree{templatesGoMod, map[string]*bintree{}},
		"go.sum":             &bintree{templatesGoSum, map[string]*bintree{}},
		"main.go":            &bintree{templatesMainGo, map[string]*bintree{}},
		"prot.yaml":          &bintree{templatesProtYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
